###
struct A {
    int x;
    int y;
    int z;
    int getSum(){
        return x + y + z;
    }
};

A c = {7, 8, 9};

int func1(){
    A a = {1, 2, 3};
    A b = {4, 5, 6};
    return a.getSum() + b.getSum() + c.getSum();
}

$i686-elf-g++ -c struct.cpp -O0
$objdump -D struct.o

Disassembly of section .text:
00000000 <_Z5func1v>:
   0:	55                   	push   %ebp                         // Save EBP on the stack 
   1:	89 e5                	mov    %esp,%ebp                    // Set EBP to the value of ESP
   3:	53                   	push   %ebx                         // Preserve value of EBX 
   4:	83 ec 24             	sub    $0x24,%esp                   // Allocate 0x24 bytes (36 bytes) on the stack
   7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)             // Put value 0x1 on stack location EBP - 20 bytes (a.x)
   e:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)             // Put value 0x2 on stack location EBP - 16 bytes (a.y)
  15:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)              // Put value 0x3 on stack location EBP - 12 bytes (a.z)
  1c:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)             // Put value 0x4 on stack location EBP - 32 bytes (b.x)
  23:	c7 45 e4 05 00 00 00 	movl   $0x5,-0x1c(%ebp)             // Put value 0x5 on stack location EBP - 28 bytes (b.y)
  2a:	c7 45 e8 06 00 00 00 	movl   $0x6,-0x18(%ebp)             // Put value 0x6 on stack location EBP - 24 bytes (b.z)
  31:	83 ec 0c             	sub    $0xc,%esp                    // Further allocate 0xc bytes (12 bytes) on the stack (why??)
  34:	8d 45 ec             	lea    -0x14(%ebp),%eax             // EAX now points to location EBP - 20 bytes (a.x)
  37:	50                   	push   %eax                         // Save value of EAX on the stack (current points to a.x on stack)
  38:	e8 fc ff ff ff       	call   39 <_Z5func1v+0x39>          // Calls getSum()?
  3d:	83 c4 10             	add    $0x10,%esp                   // Deallocate 0x10 bytes (16 bytes) from the stack
                                                                            // undos what was allocated by instruction 'sub $0xc,%esp' on byte 21
  40:	89 c3                	mov    %eax,%ebx                    // Save return value stored in EAX to EBX
  42:	83 ec 0c             	sub    $0xc,%esp                    // allocate 0xc bytes (12 bytes) on the stack again
  45:	8d 45 e0             	lea    -0x20(%ebp),%eax             // EAX now points to location EBP - 32 bytes (b.x)
  48:	50                   	push   %eax                         // Save value of EAX on the stack (current points to b.x on stack)
  49:	e8 fc ff ff ff       	call   4a <_Z5func1v+0x4a>          // Calls getSum()?
  4e:	83 c4 10             	add    $0x10,%esp                   // Deallocate 0x10 bytes (16 bytes) from the stack
  51:	01 c3                	add    %eax,%ebx                    // Add return value of EAX onto the register EBX (a.getSum() + b.getSum())
  53:	83 ec 0c             	sub    $0xc,%esp                    // allocate 0xc bytes (12 bytes) on the stack again
  56:	68 00 00 00 00       	push   $0x0                         // 0x0 refers to the location of the global data, of the struct c
  5b:	e8 fc ff ff ff       	call   5c <_Z5func1v+0x5c>          // Calls getSum()?
  60:	83 c4 10             	add    $0x10,%esp                   // Deallocate 0x10 bytes (16 bytes) from the stack
  63:	01 d8                	add    %ebx,%eax                    // by this point EAX holds the sum of (a.getSum() + b.getSum() + c.getSum())
  65:	8b 5d fc             	mov    -0x4(%ebp),%ebx              // Restore the value of EBX since we as the callee need to preserve this register
  68:	c9                   	leave                               //  
  69:	c3                   	ret                                 //

Disassembly of section .data:
00000000 <c>:
   0:	07                   	pop    %es
   1:	00 00                	add    %al,(%eax)
   3:	00 08                	add    %cl,(%eax)
   5:	00 00                	add    %al,(%eax)
   7:	00 09                	add    %cl,(%ecx)
   9:	00 00                	add    %al,(%eax)
	...

Disassembly of section .text._ZN1A6getSumEv:
00000000 <_ZN1A6getSumEv>:
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	8b 45 08             	mov    0x8(%ebp),%eax
   6:	8b 10                	mov    (%eax),%edx
   8:	8b 45 08             	mov    0x8(%ebp),%eax
   b:	8b 40 04             	mov    0x4(%eax),%eax
   e:	01 c2                	add    %eax,%edx
  10:	8b 45 08             	mov    0x8(%ebp),%eax
  13:	8b 40 08             	mov    0x8(%eax),%eax
  16:	01 d0                	add    %edx,%eax
  18:	5d                   	pop    %ebp
  19:	c3                   	ret
